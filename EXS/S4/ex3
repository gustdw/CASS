.globl main
.data
    heap: .space 1000000

.text
allocate_space:
    mv t0, a0
    mv a0, s9
    add s9, s9, t0
    ret

stack_create:   #TODO
	addi sp, sp, -4
	sw ra, (sp)
	li a0, 4
	jal allocate_space
	sw zero, (a0)		#TOP POINTER
	
	lw ra (sp)
	addi sp, sp, 4
	ret

stack_push:     #TODO
	addi sp, sp, -12
	sw ra, (sp)
	sw a0, 4(sp)		#a0 is het adress van eerste element
	sw a1, 8(sp)
	
	li a0, 8
	jal allocate_space
	
	lw t0, 4(sp)		#verwijzing van vorige toppointer
	
	lw t1, (t0)
	sw a0, (t0)
	
	sw t1, 4(a0)		#waarde van nieuwe chunk
	lw t1, 8(sp)		#CORRECTIE NODIG
	sw t1, (a0)
	
	lw ra, (sp)
	addi sp, sp, 12
	ret

stack_pop:      #TODO
	
	lw t0, (a0)		#t0 is adres waar top pointer naar wijst
	lw t1, 4(t0)		#t1 is adres van pointer naar vorige chunk
	sw t1, (a0)		#verander adres waar top naar wijst naar adres waar de pointer van verwijderde chunk naar wees
	lw a0, (t0)		#t2 is waarde van verwijderde element
	ret

main:
    la s9, heap

    # Test code
    jal stack_create    # Create stack -> top pointer in a0

    addi sp, sp, -4
    sw a0, (sp)	        # Push top pointer on call stack

    # Push 1 to stack
    li a1, 1
    jal stack_push

    # Push 2 to stack
    lw a0, (sp)
    li a1, 2
    jal stack_push

    # Push 3 to stack
    lw a0, (sp)
    li a1, 3
    jal stack_push

    # Verify the state of the stack using the single step function!
    # It should look like the picture below.

    # Pop 3 from stack
    lw a0, (sp)
    jal stack_pop

    # Pop 2 from stack
    lw a0, (sp)
    jal stack_pop

    # Verify that a0 equals 2 now
    # Verify that the stack top now points to the value 1
    addi sp, sp, 4

